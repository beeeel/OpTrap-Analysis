/**
 * Using sequence acquisition and real-time processing to track the location of a particle
 */
// Write the save path here, be careful the folder doesn't already have data in it!
int set = 1;
int rep = "01"

folderPath = "E:/Will/data/2021_03_11/hela_S3_5um2_"+set+"_"+rep+"/";

// Record stage location in units of 0.1um here (10,000 x mm)
XPosns = new int[]{};
YPosns = new int[]{};
// Find and enter bead location in px
XCorners = new int[]{};
YCorners = new int[]{};
// Enter ROI sizes in px - choosing more than 64 rows will slow acquisition
XSizes = new int[]{};
YSizes = new int[]{};

// Acquisition parameters
int n = 10e4; // number of frames
int saveInterval = 1e4; // How often to save an image (in frames)
float expMs = 0.9;		// Exposure time (ms)
int subWidth = 90; // Number of px on each side to calculate CofM


// Get values for this acquisition
Corner = new int[]{ XCorners[set-1], YCorners[set-1] };
Size = new int[]{ XSizes[set-1], YSizes[set-1]}; 

// Prepare move command - this may be excessive as I have since discovered the axis direction reversal
pmX = XPosns[set-1] > 0 ? "-" : ""; // X axis is reversed on stage display
pmY = YPosns[set-1] < 0 ? "-" : "";
X = (XPosns[set-1] > 0? -1*XPosns[set-1] : XPosns[set-1]);
Y = (YPosns[set-1] < 0? -1*YPosns[set-1] : YPosns[set-1]);
// The full command, print to output before sending to stage
com = "M X="+ pmX + X + " Y=" + pmY + Y;
print(com);
print(sendASICommand(com));


// START YOUR ENGINES! (jk)
startTime = System.nanoTime();
mm.live().setLiveMode(false);

// Need this for getMean
import Static_Image_Math;

// Define two functions for saving the data
byte[] doubleToByteArray( double[] i, int len )
{ // Converts double array to byte array. Needs to be given the length of the array
 ByteArrayOutputStream bos = new ByteArrayOutputStream();
 DataOutputStream dos = new DataOutputStream(bos);
 for (int idx = 0; idx < len; idx++){
 	dos.writeDouble(i[idx]);
 }
 dos.flush();
 return bos.toByteArray();
}

void writeDoubleArrayToFile(double[] array, int len, String path)
{ // Writes double array to file as byte array. Needs to be given the length of the array
file = new File(path);
fos = new FileOutputStream(file);
if (!file.exists()){
	file.createNewFileCentres();
}
bytesArray = doubleToByteArray(array, len);
fos.write(bytesArray);
fos.flush();
fos.close();
}

// Check the foldCentreser exists and is empty
imageFolder = "images_and_metadata";
folder = new File(folderPath);
if (folder.isDirectory()){
	subFolder = new File(folderPath + imageFolder);
	if (subFolder.isDirectory()){
		throw new Exception("Path " + folderPath + imageFolder + " already exists. Pick a new path");
	}
} else if (folder.exists()) {
	throw new Exception("Path " + folderPath + " is a file, not a folder");
} else {
	folder.mkdir();
}

// Check saveInterval is sensible compared to n
if (saveInterval >= n){
	print("number of frames, n = " + n + " saveInterval = " + saveInterval);
	throw new Exception("saveInterval must be less than number of frames otherwise timing calculation doesn't work");
}

// Allocate some variables
Xls = new double[n];
Yls = new double[n];
Xrs = new double[n];
Yrs = new double[n];
Is = new double[n];
Times = new double[n];
int i = 0;
int iSave = 0;
double firstTime = 0, lastTime = 0;
java.awt.Rectangle ROI = new Rectangle(Corner[0], Corner[1], Size[0], Size[1]);
java.awt.Rectangle ROI2 = new Rectangle(0, 0, 1920, 1080);

// Reset the ROI to full frame if necessary
int width = mmc.getImageWidth();
int height = mmc.getImageHeight();
if ((width != 1920) || (height != 1080))
{
	mm.setROI(ROI2);
}
int width = mmc.getImageWidth();
int height = mmc.getImageHeight();
print("Initial w = " + width + " h = " + height);

// Prepare coordinated builder and datastore
builder = mm.data().getCoordsBuilder().z(0).channel(0).stagePosition(0);
store = mm.data().createRAMDatastore();	// ROI Images
store1 = mm.data().createRAMDatastore(); // full FOV images
saveMode = org.micromanager.data.Datastore.SaveMode.valueOf("MULTIPAGE_TIFF");

// Create a display to show images as they are acquired.
mm.displays().createDisplay(store);
mm.displays().createDisplay(store1);

// Get one image at full size
print("Getting full FOV image at " + (System.nanoTime() - startTime)/1e9 + "s");
if (mmc.isSequenceRunning())
{
	print("Stopping previous acquisition");
	mmc.stopSequenceAcquisition(); // Stop previous acquisition in case it is running
}

mmc.startSequenceAcquisition(1, 0.0, true);
java.util.concurrent.TimeUnit.MILLISECONDS.sleep(100);
img = mmc.popNextTaggedImage();
image = mm.data().convertTaggedImage(img,builder.time(0).build(), null);
store1.putImage(image);

// Set the ROI and check it has been set
mm.setROI(ROI);
int width = mmc.getImageWidth();
int height = mmc.getImageHeight();
print("w = " + width + " h = " + height);

// Set exposure
mmc.setExposure(expMs);

// Variables to be used in the processing loop
img = 0;
pixels = new int[Size[0]*Size[1]];
centre = new double[2];

// Start acquiring and process frames as they arrive
if (mmc.isSequenceRunning())
{
	print("Stopping previous acquisition");
	mmc.stopSequenceAcquisition(); // Stop previous acquisition in case it is running
}
mmc.startSequenceAcquisition(n, 0.0, true);
while (!mmc.isSequenceRunning()){
	java.util.concurrent.TimeUnit.MILLISECONDS.sleep(5); // Wait for acquisition to start
} // There have been weird bugs with it not getting any images, maybe this will help?
print("Started acquition at " + (System.nanoTime() - startTime)/1e9 + "s");

while  ((mmc.getRemainingImageCount() > 0 || mmc.isSequenceRunning(mmc.getCameraDevice())) && i < n) {
   if (mmc.getRemainingImageCount() > 0 && i < n) 
   {
   	
   	// Get the next frame
   	if (i%saveInterval == 0)
   	{ // Every [saveInterval] frames, get the metadata and display the image
   		img = mmc.popNextTaggedImage();
   		image = mm.data().convertTaggedImage(img,
         	builder.time(iSave).build(), null);
      	store.putImage(image);
      	pixels = image.getRawPixels();
      	iSave++;
      	if (i == 0) {firstTime = img.tags.getDouble("ElapsedTime-ms");}
   	} else
   	{ // The rest of the time, just get the pixel data
			pixels = mmc.popNextImage();
   	}
   	
   	// Calculate centre of mass
		centres = Static_Image_Math.getTwoCentroidsBasicROI(pixels, width, height, subWidth);
		Xls[i] = centres[0];
		Yls[i] = centres[1];
		Xrs[i] = centres[2];
		Yrs[i] = centres[3];
		Is[i] = Static_Image_Math.getMean(pixels, width, height);
		
		if (i%saveInterval == 0) // Every [saveInterval] frames, print this frame's info
		{
			print("i " + i + " Xl = " + Xls[i] + " Yl = " + Yls[i]+ " Xr = " + Xrs[i] + " Yr = " + Yrs[i]);
			print("In buffer: " + mmc.getRemainingImageCount());
			print("Total acquired: " + (i + mmc.getRemainingImageCount()));
			print("T = " + (System.nanoTime() - startTime)/1e9 + "s");
			print("");
		}
		i++;
   }
}
lastTime = img.tags.getDouble("ElapsedTime-ms");
if (iSave > 1) {
	frameTime = (lastTime - firstTime)/((iSave-1)*saveInterval);
	for (int i = 0; i < n; i++){
		Times[i] = i * frameTime;}
}

print("Completed main acquisition at " + (System.nanoTime() - startTime)/1e9 + "s");
// Reset the ROI to full frame
mm.setROI(ROI2);
print("Set ROI at " + (System.nanoTime() - startTime)/1e9 + "s");
// Get an after image
if (mmc.isSequenceRunning())
{
	print("Stopping previous acquisition");
	mmc.stopSequenceAcquisition(); // Stop previous acquisition in case it is running
}
mmc.startSequenceAcquisition(1, 0.0, true);
java.util.concurrent.TimeUnit.MILLISECONDS.sleep(100);
img = mmc.popNextTaggedImage();
image = mm.data().convertTaggedImage(img,
	builder.time(1).build(), null);
store1.putImage(image);

// Finish up - stop the acquisition and save all the data
print("Completed all acquisition and processing at " + (System.nanoTime() - startTime)/1e9 + "s");
mmc.stopSequenceAcquisition();

// Save data arrays
writeDoubleArrayToFile(Xls, n, folderPath + "Xl.dat");
writeDoubleArrayToFile(Yls, n, folderPath + "Yl.dat");
writeDoubleArrayToFile(Xrs, n, folderPath + "Xr.dat");
writeDoubleArrayToFile(Yrs, n, folderPath + "Yr.dat");
writeDoubleArrayToFile(Is, n, folderPath + "I.dat");
writeDoubleArrayToFile(Times, n, folderPath + "Times.dat");

// Save images
store.save(saveMode, folderPath+imageFolder);
store1.save(saveMode, folderPath+"full_"+imageFolder);

print("Saved at " + (System.nanoTime() - startTime)/1e9 + "s");
mm.live().setLiveMode(true);
